<?php

namespace App;

use App\Models\Order;
use App\Models\Product;
use Carbon\Carbon;
use Exception;
use Illuminate\Support\Facades\Log;
use MercadoPago\SDK;
use MercadoPago\Item;
use MercadoPago\Preference;

class MercadoPago
{

    /**
     * @var string
     * Private acces token for mercadopago
     * */
    private $access_token;

    /**
     * @var string
     * Public access token for mercadopago
     * */
    public $public_token;

    /**
     * @var object
     * Mercado pago user
     * */
    public $user;

    /**
     * @var object
     * Saved Cards for mercadopago pago user
     * */
    public $user_cards;

    /**
     * @var integer
     * Total amount of transaction.
     * */
    public $transaction_amount;

    /**
     * @var string
     * Card token generated by mercadopago.
     * */
    public $token;

    /**
     * @var string
     * Ishidan order number.
     * */
    public $external_reference;

    /**
     * @var boolean
     * Indicate if the card used for payment new
     * */
    public $is_new_card;

    /**
     * @var boolean
     * User wants to save this card for faster transactions.
     * */
    public $remember_new_card;

    /**
     * @var string
     * Payment method id generated by mercadopago.
     * */
    public $payment_method_id;

    /**
     * Create a new mercadopago instance.
     * 
     */
    public function __construct()
    {
        // Set live credentials
        if (env('MERCADOPAGO_MODE', false) === 'live') {
            $this->access_token = env('MERCADOPAGO_SECRET_TOKEN_LIVE');
            $this->public_token = env('MERCADOPAGO_PUBLIC_TOKEN_LIVE');
        } else {
            // Set sandbox credential
            $this->access_token = env('MERCADOPAGO_SECRET_TOKEN_TEST');
            $this->public_token = env('MERCADOPAGO_PUBLIC_TOKEN_TEST');
        }

        // Init Mercadopago
        try {
            SDK::setAccessToken($this->access_token);
        } catch (Exception $e) {
            Log::alert($e->getMessage());
        }
    }

    /**
     * Check if user is new.
     * 
     * @return object
     */
    public function preference(Order $order)
    {
        // Crea un objeto de preferencia
        $preference = new Preference();

        // URL back
        $preference->back_urls = array(
            "success" => route('chechout.payment.response', ['type' => 'success', 'order_number' => $order->number]),
            "failure" => route('chechout.payment.response', ['type' => 'failure', 'order_number' => $order->number]),
        );

        // Auto return
        $preference->auto_return = "approved";
        $preference->binary_mode = true;

        // Methods
        $preference->payment_methods = [
            'installments' => 1,
            'excluded_payment_types' => [
                ['id' => 'atm'],
                ['id' => 'ticket']
            ],
            'statement_descriptor' => 'ELLIMONERODIGITAL'
        ];

        $products = $order->products;
        $items = [];

        foreach ($products as $cartItem) {
            $item = new Item();
            $item->title = $cartItem['name'];
            $item->quantity = $cartItem['quantity'];
            $item->unit_price = $cartItem['price'];
            $item->picture_url = asset($cartItem['image']);
            $item->description = $cartItem['description'];
            $items[] = $item;
        }

        $preference->external_reference = 'user-' . backpack_user()->id . '_order-' . $order->id;
        $preference->items = $items;
        $preference->save();

        return $preference;
    }

    /**
     * Get users cards.
     * 
     * @param string $preference_id Mercadopago preference id.
     * 
     * @return object
     */
    public function checkPayment(string $preference_id)
    {
        $url = 'https://api.mercadopago.com/v1/payments/' . $preference_id . '?access_token=' . $this->access_token;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $result = curl_exec($ch);
        curl_close($ch);
        return json_decode($result);
    }
}
